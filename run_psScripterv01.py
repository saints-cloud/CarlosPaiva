# -*- coding: utf-8 -*-
import os
import sys
import time
import traceback
import clr
import io

# Configura√ß√£o cr√≠tica para execu√ß√£o headless
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# -------------------------------------------------------------
# Configura√ß√£o de caminhos - ESSENCIAL PARA HEADLESS
# -------------------------------------------------------------
dwsim_path = r"C:\Program Files\DWSIM"
sys.path.append(dwsim_path)
os.environ["PATH"] = dwsim_path + ";" + os.environ["PATH"]
flowsheet_path = r"C:\Users\Usuario\Documents\DWSIM-Paiva\psScripter\psScripterv01.dwxmz"

# -------------------------------------------------------------
# Carregar DLLs com verifica√ß√£o expl√≠cita
# -------------------------------------------------------------
dlls = [
    "CapeOpen.dll",
    "DWSIM.Automation.dll",
    "DWSIM.Interfaces.dll",
    "DWSIM.GlobalSettings.dll",
    "DWSIM.SharedClasses.dll",
    "DWSIM.Thermodynamics.dll",
    "DWSIM.UnitOperations.dll",
    "DWSIM.Inspector.dll",
    "System.Buffers.dll",
]

for dll in dlls:
    try:
        clr.AddReference(os.path.join(dwsim_path, dll))
        print(f"‚úÖ DLL carregada: {dll}")
    except Exception as e:
        print(f"‚ö†Ô∏è Falha ao carregar {dll}: {str(e)}")
        # Tenta carregar sem caminho completo (pode funcionar no headless)
        try:
            clr.AddReference(dll)
            print(f"‚úÖ DLL carregada (m√©todo alternativo): {dll}")
        except:
            print(f"‚ùå Falha cr√≠tica ao carregar {dll}")

# Importa√ß√£o ESSENCIAL para execu√ß√£o de scripts
from DWSIM.Automation import Automation3
from DWSIM.Interfaces.Enums import Enums

# -------------------------------------------------------------
# Fun√ß√£o CR√çTICA para inicializa√ß√£o de blocos Python
# -------------------------------------------------------------
def enable_scripting_in_flowsheet(flowsheet):
    """Habilita explicitamente a execu√ß√£o de scripts nos blocos Python"""
    for obj in flowsheet.SimulationObjects.Values:
        if obj.GraphicObject.ObjectType == Enums.GraphicObjects.ObjectType.PythonScript:
            print(f"üîß Habilitando script em: {obj.Name}")
            obj.Enabled = True  # Garante que o bloco est√° habilitado
            
            # Configura√ß√£o especial para execu√ß√£o headless
            obj.AutomationMode = True  # Modo automa√ß√£o
            obj.ScriptingInstance = None  # For√ßa recria√ß√£o do contexto

# -------------------------------------------------------------
# Fun√ß√µes existentes modificadas
# -------------------------------------------------------------
def inicializar_flowsheet(caminho):
    gerenciador = Automation3()
    
    # CONFIGURA√á√ÉO CR√çTICA PARA HEADLESS
    gerenciador.InitializeScriptEnvironment = True  # Habilita ambiente de script
    gerenciador.ScriptPaths = []  # Limpa caminhos de script
    
    print(f"‚è≥ Carregando flowsheet: {caminho}")
    fs = gerenciador.LoadFlowsheet(caminho)
    
    # Habilita explicitamente os blocos Python
    enable_scripting_in_flowsheet(fs)
    
    return gerenciador, fs

def executar_auto(gerenciador, flowsheet, sufixo):
    """
    Execu√ß√£o autom√°tica incremental:
      - Usa CalculateFlowsheet3 para recalcular apenas blocos marcados como "dirty"
        (componentes que tiveram altera√ß√µes em par√¢metros, fluxos de entrada ou resultados dependentes).
      - Cada objeto do flowsheet possui flag boolean `Calculated` indicando se seus resultados est√£o v√°lidos.
      - Mant√©m essas flags; n√£o limpa resultados anteriores, de modo que apenas objetos com
        `Calculated=False` ou modificados s√£o recalculados.
      - Respeita depend√™ncias internas e timeout de execu√ß√£o.

    Par√¢metros:
      gerenciador: inst√¢ncia de Automation3
      flowsheet: objeto IFlowsheet carregado
      sufixo: string usada para diferenciar arquivos de sa√≠da e log

    Para manipular flags de c√°lculo:
      - flowsheet.ClearAllCalculatedFlags(): limpa todas as flags, marcando tudo como "dirty".
      - obj = flowsheet.GetFlowsheetSimulationObject(name); obj.Calculated = False: limpa flag de um objeto.
    """
    timeout_seconds = 300  # tempo m√°ximo de c√°lculo antes de abortar
    print("‚öôÔ∏è Iniciando c√°lculo autom√°tico (CalculateFlowsheet3)...")
    inicio = time.perf_counter()
    excecoes = gerenciador.CalculateFlowsheet3(flowsheet, timeout_seconds)
    duracao = time.perf_counter() - inicio

    _relatorio_excecoes(excecoes)
    print(f"‚è±Ô∏è Dura√ß√£o c√°lculo autom√°tico: {duracao:.2f}s")

    _salvar_saida(gerenciador, flowsheet, sufixo, duracao)

def executar_ordenado(gerenciador, flowsheet, sufixo):
    """
    Execu√ß√£o incremental customizada:
      - Usa RequestCalculation3 para aplicar a ordem definida em <CalculationOrderList> no XML.
      - Respeita a CustomCalculationOrder gravada no flowsheet.
      - Cada objeto do flowsheet possui flag `Calculated`; m√©todos incrementais
        recalcultam apenas objetos com `Calculated=False` ou modificados.
      - Mant√©m flags existentes; n√£o limpa resultados anteriores.

    Par√¢metros:
      gerenciador: inst√¢ncia de Automation3 (para salvar sa√≠da)
      flowsheet: objeto IFlowsheet carregado
      sufixo: string usada para diferenciar arquivos de sa√≠da e log

    Para manipular flags de c√°lculo:
      - flowsheet.ClearAllCalculatedFlags(): limpa todas as flags, for√ßando rec√°lculo completo.
      - obj.Calculated = False: limpa flag de um objeto espec√≠fico.

    Para modificar a ordem de c√°lculo:
      - Edite o XML <CalculationOrderList> diretamente.
      - Ou use flowsheet.RequestCalculation3(None, True) com lista de GUIDs via API.
    """
    print("‚öôÔ∏è Iniciando c√°lculo ordenado (RequestCalculation3)...")
    inicio = time.perf_counter()
    try:
        # sender=None, ChangeCalculationOrder=True
        flowsheet.RequestCalculation3(None, True)
        excecoes = None
    except Exception as e:
        excecoes = [e]
    duracao = time.perf_counter() - inicio

    _relatorio_excecoes(excecoes)
    print(f"‚è±Ô∏è Dura√ß√£o c√°lculo ordenado: {duracao:.2f}s")

    _salvar_saida(gerenciador, flowsheet, sufixo, duracao)

def _relatorio_excecoes(excecoes):
    """
    Prints exception messages if any occurred during flowsheet calculation; otherwise, reports no exceptions.

    Args:
        excecoes (list or None): List of exception objects or None if no exceptions occurred.
    """
    if excecoes:
        for ex in excecoes:
            msg = ex.ToString() if hasattr(ex, 'ToString') else str(ex)
            print(f"‚ö†Ô∏è Exce√ß√£o: {msg}")
    else:
        print("üöÄ Sem exce√ß√µes durante o c√°lculo.")

def _salvar_saida(gerenciador, flowsheet, sufixo, duracao):
    """
    Saves the calculated flowsheet and a log file with execution details.

    Args:
        gerenciador (Automation3): Instance of the DWSIM automation manager.
        flowsheet (IFlowsheet): The flowsheet object to be saved.
        sufixo (str): Suffix to differentiate output and log files.
        duracao (float): Duration of the calculation in seconds.
    """
    base, ext = os.path.splitext(flowsheet_path)
    arquivo_saida = f"{base}_{sufixo}{ext}"
    arquivo_log = f"{base}_{sufixo}_log.txt"

    print(f"üíæ Salvando flowsheet: {arquivo_saida}")
    gerenciador.SaveFlowsheet(flowsheet, arquivo_saida, compressed=False)

    with open(arquivo_log, 'w', encoding='utf-8') as log:
        log.write(f"Entrada: {flowsheet_path}\n")
        log.write(f"Sa√≠da:   {arquivo_saida}\n")
        log.write(f"Dura√ß√£o: {duracao:.2f}s\n")

    print(f"üìÇ Flowsheet gerado: {arquivo_saida}")
    print(f"üìÑ Log gerado: {arquivo_log}\n")


# ... (mantenha as outras fun√ß√µes como executar_auto, executar_ordenado, etc) ...

def main():
    # Execu√ß√£o autom√°tica incremental
    mgr_auto, fs_auto = inicializar_flowsheet(flowsheet_path)
    
    # For√ßa c√°lculo inicial para estabilizar
    print("‚öôÔ∏è Executando c√°lculo inicial de estabiliza√ß√£o...")
    fs_auto.RequestCalculation2(True, True)  # For√ßa rec√°lculo completo
    
    executar_auto(mgr_auto, fs_auto, sufixo='auto')

    # Execu√ß√£o ordenada baseada no XML
    mgr_ord, fs_ord = inicializar_flowsheet(flowsheet_path)
    
    # For√ßa c√°lculo inicial para estabiliza√ß√£o
    print("‚öôÔ∏è Executando c√°lculo inicial de estabiliza√ß√£o...")
    fs_ord.RequestCalculation2(True, True)
    
    executar_ordenado(mgr_ord, fs_ord, sufixo='ordenado')

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print("‚ùå Erro inesperado:")
        traceback.print_exc()
        
        # Log detalhado para diagn√≥stico
        with open("error_dump.txt", "w", encoding="utf-8") as f:
            f.write(f"Erro: {str(e)}\n\n")
            f.write(traceback.format_exc())
        
        sys.exit(1)